{"version":3,"sources":["components/GeneratedPassword.js","redux/actions/index.js","components/PasswordLength.js","components/PasswordSettings.js","App.js","reportWebVitals.js","redux/reducer/passwordReducer.js","redux/reducer/index.js","redux/store/index.js","index.js"],"names":["connect","state","password","reducer","useEffect","className","type","value","readOnly","ADD_PASSWORD","ADD_LENGTH","addPassword","payload","dispatch","useState","passLength","setState","parseFloat","htmlFor","min","max","id","onChange","target","upper","lower","number","symbols","localStorage","getItem","handleChange","name","checked","prevSt","role","onClick","characters","charsLength","length","i","Math","floor","random","setItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAyBeA,eAJS,SAACC,GAAD,MAAY,CAClCC,SAAUD,EAAME,QAAQD,YAGXF,EArBW,SAAC,GAAkB,IAAhBE,EAAe,EAAfA,SAG3B,OAFAE,qBAAU,eAGR,uBACEC,UAAU,WACVC,KAAK,OACLC,MAAQL,EACRM,UAAQ,O,OCZDC,EAAe,eACfC,EAAa,aAEbC,EAAc,SAACC,GAAD,MAAc,CACvCN,KAAMG,EACNG,YCkCaZ,iBAlCQ,SAAC,GAAkB,IAAhBa,EAAe,EAAfA,SACxB,EAA0BC,mBAAS,CAAEC,WAAY,IAAjD,mBAAOd,EAAP,KAAce,EAAd,KACAZ,qBAAU,WDCa,IAACQ,ECAtBC,GDAsBD,ECAHK,WAAWhB,EAAMc,YDAD,CACrCT,KAAMI,EACNE,eCDG,CAACX,IAIJ,OACE,0BAASI,UAAU,cAAnB,UACE,6CAEG,IACAJ,EAAMc,cAET,uBAAOG,QAAQ,QAAQb,UAAU,cAAjC,SACE,uBACEA,UAAU,QACVC,KAAK,QACLa,IAAI,IACJC,IAAI,KACJb,MAAQN,EAAMc,WACdM,GAAG,QACHC,SAlBa,SAAC,GAA2B,IAAff,EAAc,EAAxBgB,OAAUhB,MAChCS,EAAS,CAAED,WAAYR,e,cC0GZP,eAJS,SAACC,GAAD,MAAY,CAClCc,WAAYd,EAAME,QAAQY,cAGbf,EAhHU,SAAC,GAA8B,IAA5Ba,EAA2B,EAA3BA,SAAUE,EAAiB,EAAjBA,WACpC,EAA0BD,mBAAS,CACjCU,OAAO,EACPC,OAAO,EACPC,QAAQ,EACRC,SAAS,IAJX,mBAAO1B,EAAP,KAAce,EAAd,KAMAZ,qBAAU,WACR,IAAMF,EAAW0B,aAAaC,QAAQ,YAClC3B,GAAUW,EAASF,EAAYT,MAClC,IACH,IAAM4B,EAAe,SAAC,GAAmC,IAAD,IAAhCP,OAAUQ,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,QACtChB,GAAS,SAACiB,GAAD,mBAAC,eACLA,GADI,kBAENF,EAAOC,QAuBZ,OACE,0BAAS3B,UAAU,gBAAnB,UACE,8CACA,yBAASA,UAAU,qCAAnB,SACE,wBAAOa,QAAQ,YAAYb,UAAU,yBAArC,8BAEE,uBACEA,UAAU,mBACV6B,KAAK,SACL5B,KAAK,WACLyB,KAAK,QACLV,GAAG,YACHW,QAAU/B,EAAMuB,MAChBF,SAAWQ,SAIjB,yBAASzB,UAAU,qCAAnB,SACE,wBAAOa,QAAQ,YAAYb,UAAU,yBAArC,8BAEE,uBACEA,UAAU,mBACV6B,KAAK,SACL5B,KAAK,WACLyB,KAAK,QACLV,GAAG,YACHW,QAAU/B,EAAMwB,MAChBH,SAAWQ,SAIjB,yBAASzB,UAAU,qCAAnB,SACE,wBAAOa,QAAQ,SAASb,UAAU,yBAAlC,4BAEE,uBACEA,UAAU,mBACV6B,KAAK,SACL5B,KAAK,WACLyB,KAAK,SACLV,GAAG,SACHW,QAAU/B,EAAMyB,OAChBJ,SAAWQ,SAIjB,yBAASzB,UAAU,qCAAnB,SACE,wBAAOa,QAAQ,SAASb,UAAU,yBAAlC,4BAEE,uBACEA,UAAU,mBACV6B,KAAK,SACL5B,KAAK,WACLyB,KAAK,UACLV,GAAG,SACHW,QAAU/B,EAAM0B,QAChBL,SAAWQ,SAIjB,wBAAQzB,UAAU,WAAWC,KAAK,SAAS6B,QA/E3B,WAClB,IAKIC,EAAa,GALyBnC,EAAlCuB,QAMGY,GAJS,8BAFsBnC,EAA3BwB,QAOJW,GAJS,8BAHsBnC,EAApB0B,UAQTS,GAPE,iBAD2BnC,EAAXyB,SASnBU,GALI,cAQhB,IAFA,IAAMC,EAAcD,EAAWE,OAC3BpC,EAAW,GACNqC,EAAI,EAAGA,EAAIxB,EAAYwB,GAAK,EAAG,CAEtCrC,GAAYkC,EADSI,KAAKC,MAAMD,KAAKE,SAAWL,IAGlDxB,EAASF,EAAYT,IACrB0B,aAAae,QAAQ,WAAYzC,IA6D/B,qCClFS0C,EAbH,kBACV,yBAASvC,UAAU,OAAnB,SACE,sBAAKA,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,IACA,oCACE,cAAC,EAAD,IACA,cAAC,EAAD,aCDOwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCLRQ,EAAgB,CACpBpD,SAAU,GACVa,WAAY,GAoBCZ,EAjBC,WAAoC,IAAnCF,EAAkC,uDAA1BqD,EAAeC,EAAW,uCACjD,OAAQA,EAAOjD,MACf,KAAKG,EACH,OAAO,2BACFR,GADL,IAEEC,SAAUqD,EAAO3C,UAErB,KAAKF,EACH,OAAO,2BACFT,GADL,IAEEc,WAAYwC,EAAO3C,UAEvB,QACE,OAAOX,ICfIuD,EAFKC,YAAgB,CAAEtD,YCEvBuD,EAFDC,YAAYH,GCK1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAQA,EAAlB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.7b7cb89b.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst GeneratedPassword = ({ password }) => {\n  useEffect(() => {\n  });\n  return (\n    <input\n      className=\"password\"\n      type=\"text\"\n      value={ password }\n      readOnly\n    />\n  );\n};\n\nGeneratedPassword.propTypes = {\n  password: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  password: state.reducer.password,\n});\n\nexport default connect(mapStateToProps)(GeneratedPassword);\n","export const ADD_PASSWORD = 'ADD_PASSWORD';\nexport const ADD_LENGTH = 'ADD_LENGTH';\n\nexport const addPassword = (payload) => ({\n  type: ADD_PASSWORD,\n  payload,\n});\n\nexport const addLength = (payload) => ({\n  type: ADD_LENGTH,\n  payload,\n});\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addLength } from '../redux/actions';\n\nconst PasswordLength = ({ dispatch }) => {\n  const [state, setState] = useState({ passLength: 8 });\n  useEffect(() => {\n    dispatch(addLength(parseFloat(state.passLength)));\n  }, [state]);\n  const handleChange = ({ target: { value } }) => {\n    setState({ passLength: value });\n  };\n  return (\n    <section className=\"range-label\">\n      <legend>\n        LENGTH:\n        {' '}\n        {state.passLength}\n      </legend>\n      <label htmlFor=\"range\" className=\"length-sect\">\n        <input\n          className=\"range\"\n          type=\"range\"\n          min=\"4\"\n          max=\"32\"\n          value={ state.passLength }\n          id=\"range\"\n          onChange={ handleChange }\n        />\n      </label>\n    </section>\n  );\n};\n\nPasswordLength.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(PasswordLength);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addPassword } from '../redux/actions';\n\nconst PasswordSettings = ({ dispatch, passLength }) => {\n  const [state, setState] = useState({\n    upper: false,\n    lower: true,\n    number: false,\n    symbols: false,\n  });\n  useEffect(() => {\n    const password = localStorage.getItem('password');\n    if (password) dispatch(addPassword(password));\n  }, []);\n  const handleChange = ({ target: { name, checked } }) => {\n    setState((prevSt) => ({\n      ...prevSt,\n      [name]: checked,\n    }));\n  };\n  const handleClick = () => {\n    const { upper, lower, symbols, number } = state;\n    const symbol = '!@#$%Â¨&*()';\n    const upperLetter = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const lowerLetter = 'abcdefghijklmnopqrstuvwxyz';\n    const numbers = '0123456789';\n    let characters = '';\n    if (upper) characters += upperLetter;\n    if (lower) characters += lowerLetter;\n    if (symbols) characters += symbol;\n    if (number) characters += numbers;\n    const charsLength = characters.length;\n    let password = '';\n    for (let i = 0; i < passLength; i += 1) {\n      const randomNumber = Math.floor(Math.random() * charsLength);\n      password += characters[randomNumber];\n    }\n    dispatch(addPassword(password));\n    localStorage.setItem('password', password);\n  };\n  return (\n    <section className=\"settings-sect\">\n      <legend>SETTINGS</legend>\n      <section className=\"form-check form-switch switch-sect\">\n        <label htmlFor=\"upperCase\" className=\"label form-check-label\">\n          Include Uppercase\n          <input\n            className=\"form-check-input\"\n            role=\"switch\"\n            type=\"checkbox\"\n            name=\"upper\"\n            id=\"upperCase\"\n            checked={ state.upper }\n            onChange={ handleChange }\n          />\n        </label>\n      </section>\n      <section className=\"form-check form-switch switch-sect\">\n        <label htmlFor=\"lowerCase\" className=\"label form-check-label\">\n          Include Lowercase\n          <input\n            className=\"form-check-input\"\n            role=\"switch\"\n            type=\"checkbox\"\n            name=\"lower\"\n            id=\"lowerCase\"\n            checked={ state.lower }\n            onChange={ handleChange }\n          />\n        </label>\n      </section>\n      <section className=\"form-check form-switch switch-sect\">\n        <label htmlFor=\"number\" className=\"label form-check-label\">\n          Include Numbers\n          <input\n            className=\"form-check-input\"\n            role=\"switch\"\n            type=\"checkbox\"\n            name=\"number\"\n            id=\"number\"\n            checked={ state.number }\n            onChange={ handleChange }\n          />\n        </label>\n      </section>\n      <section className=\"form-check form-switch switch-sect\">\n        <label htmlFor=\"symbol\" className=\"label form-check-label\">\n          Include Symbols\n          <input\n            className=\"form-check-input\"\n            role=\"switch\"\n            type=\"checkbox\"\n            name=\"symbols\"\n            id=\"symbol\"\n            checked={ state.symbols }\n            onChange={ handleChange }\n          />\n        </label>\n      </section>\n      <button className=\"send-btn\" type=\"button\" onClick={ handleClick }>\n        Generate Password\n      </button>\n    </section>\n  );\n};\n\nPasswordSettings.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  passLength: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  passLength: state.reducer.passLength,\n});\n\nexport default connect(mapStateToProps)(PasswordSettings);\n","import React from 'react';\nimport './App.css';\nimport GeneratedPassword from './components/GeneratedPassword';\nimport PasswordLength from './components/PasswordLength';\nimport PasswordSettings from './components/PasswordSettings';\n\nconst App = () => (\n  <section className=\"main\">\n    <div className=\"App\">\n      <h1>Password generator</h1>\n      <GeneratedPassword />\n      <section>\n        <PasswordLength />\n        <PasswordSettings />\n      </section>\n    </div>\n  </section>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_PASSWORD, ADD_LENGTH } from '../actions';\n\nconst INITIAL_STATE = {\n  password: '',\n  passLength: 6,\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_PASSWORD:\n    return {\n      ...state,\n      password: action.payload,\n    };\n  case ADD_LENGTH:\n    return {\n      ...state,\n      passLength: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport reducer from './passwordReducer';\n\nconst rootReducer = combineReducers({ reducer });\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from '../reducer';\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}